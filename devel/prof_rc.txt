Wrote profile results to test_recomb_collector.py.lprof
Timer unit: 1e-06 s

Total time: 2.59302 s
File: /home/jaime/lib/ftprime/ftprime/argrecorder.py
Function: add_individual at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                               @profile
    27                                               def add_individual(self, name, time, population=msprime.NULL_POPULATION,
    28                                                                  is_sample=False):
    29                                                   '''Add a new individual.
    30                                                   We need to add individuals when they are *born*,
    31                                                   rather than the first time they reproduce, to ensure
    32                                                   that records are output in order by birth time of the parent.
    33                                                   '''
    34    402005       305786      0.8     11.8          if name not in self:
    35    402005       231339      0.6      8.9              self[name] = (msprime.Node(time=time, population=population,
    36    402005      1157105      2.9     44.6                                         name=name, is_sample=is_sample), [])
    37    402005       898793      2.2     34.7              self.num_nodes = max(self.num_nodes, 1+int(name))

Total time: 28.8526 s
File: /home/jaime/lib/ftprime/ftprime/argrecorder.py
Function: add_record at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                               @profile
    40                                               def add_record(self, left, right, parent, children):
    41                                                   '''
    42                                                   Add records corresponding to a reproduction event in which children (a
    43                                                   tuple of IDs) inherit from parent (a single ID) on the interval
    44                                                   [left,right).
    45                                                   '''
    46                                                   # unneeded but helpful for debugging
    47    559608      1478529      2.6      5.1          if parent not in self.keys():
    48                                                       raise ValueError("Parent " + str(parent) +
    49                                                                        "'s birth time has not been recorded with " +
    50                                                                        ".add_individual().")
    51                                                   # time = self[parent][0]
    52    559608       300326      0.5      1.0          new_rec = msprime.Edgeset(
    53    559608       254879      0.5      0.9                  parent=parent,
    54    559608       242579      0.4      0.8                  children=children,
    55    559608       238853      0.4      0.8                  left=left,
    56    559608      1555702      2.8      5.4                  right=right)
    57    559608     24781697     44.3     85.9          merge_records(new_rec, self[parent][1])

Total time: 14.25 s
File: /home/jaime/lib/ftprime/ftprime/argrecorder.py
Function: merge_records at line 142

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   142                                           @profile
   143                                           def merge_records(new, existing):
   144                                               '''
   145                                               Incorporate a new record (l,r,x,c,t[x])
   146                                                 into a list of existing ones (a,b,x,C,t[x]) sorted on left endpoint.
   147                                               Keeping them in sorted order simplifies the procedure
   148                                                 (makes it so we don't have to split the new record).
   149                                               '''
   150    559608       617547      1.1      4.3      k = 0
   151    559608       348545      0.6      2.4      cur_left = new.left
   152                                               # print("MR: -----")
   153                                               # print("adding", new)
   154                                               # print("    to", existing)
   155   1115110       964636      0.9      6.8      while (k < len(existing)) and (cur_left < new.right):
   156    555502       493499      0.9      3.5          left = existing[k].left
   157    555502       339232      0.6      2.4          right = existing[k].right
   158    555502       349807      0.6      2.5          parent = existing[k].parent
   159    555502       360762      0.6      2.5          children = existing[k].children
   160                                                   # print("k:",k)
   161                                                   # print("existing:",existing[k])
   162                                                   # print("cur_left:",cur_left)
   163    555502       336500      0.6      2.4          if new.parent != parent:
   164                                                       raise ValueError("Trying to merge records with different parents.")
   165    555502       327994      0.6      2.3          if right <= cur_left:
   166                                                       # no overlap
   167                                                       # print("no overlap")
   168     64431        38189      0.6      0.3              k += 1
   169     64431        31893      0.5      0.2              continue
   170    491071       275269      0.6      1.9          if cur_left < left:
   171                                                       # print("dangling left")
   172     46856        32937      0.7      0.2              existing.insert(k, msprime.Edgeset(
   173     46856        24331      0.5      0.2                  left=cur_left,
   174     46856        53090      1.1      0.4                  right=min(new.right, left),
   175     46856        24376      0.5      0.2                  parent=parent,
   176     46856       132844      2.8      0.9                  children=new.children))
   177     46856       291283      6.2      2.0              cur_left = min(new.right, left)
   178     46856        29613      0.6      0.2              k += 1
   179     46856        23300      0.5      0.2              continue
   180    444215       771674      1.7      5.4          combined_children = tuple(sorted(children+new.children))
   181    444215       370745      0.8      2.6          combined_rec = msprime.Edgeset(
   182    444215       238826      0.5      1.7              left=cur_left,
   183    444215      1016910      2.3      7.1              right=min(new.right, right),
   184    444215       264162      0.6      1.9              parent=new.parent,
   185    444215      1220131      2.7      8.6              children=combined_children)
   186    444215       289937      0.7      2.0          if cur_left == left:
   187                                                       # print("equal left")
   188    374551       262916      0.7      1.8              if new.right < right:
   189                                                           # print("overlap right")
   190     62945        38629      0.6      0.3                  mod_rec = msprime.Edgeset(
   191     62945        36505      0.6      0.3                          left=new.right,
   192     62945        34104      0.5      0.2                          right=right,
   193     62945        34012      0.5      0.2                          parent=parent,
   194     62945       213261      3.4      1.5                          children=children)
   195     62945        65925      1.0      0.5                  existing[k] = combined_rec
   196     62945        41770      0.7      0.3                  k += 1
   197     62945        60624      1.0      0.4                  existing.insert(k, mod_rec)
   198     62945        42126      0.7      0.3                  k += 1
   199                                                       else:
   200                                                           # print("dangling right")
   201    311606       291615      0.9      2.0                  existing[k] = combined_rec
   202    311606       214005      0.7      1.5                  k += 1
   203                                                   else:
   204                                                       # here we know that left < cur_left < right
   205                                                       # print("overlap left")
   206     69664        43775      0.6      0.3              mod_rec = msprime.Edgeset(
   207     69664        39459      0.6      0.3                      left=left,
   208     69664        37684      0.5      0.3                      right=cur_left,
   209     69664        37276      0.5      0.3                      parent=parent,
   210     69664       183293      2.6      1.3                      children=children)
   211     69664        70705      1.0      0.5              existing[k] = mod_rec
   212     69664        45699      0.7      0.3              k += 1
   213     69664        64248      0.9      0.5              existing.insert(k, combined_rec)
   214     69664        43549      0.6      0.3              k += 1
   215     69664        51159      0.7      0.4              if new.right < right:
   216                                                           # print("overlap right")
   217      6531         4663      0.7      0.0                  existing.insert(k, msprime.Edgeset(
   218      6531         4029      0.6      0.0                      left=new.right,
   219      6531         3764      0.6      0.0                      right=right,
   220      6531         3696      0.6      0.0                      parent=parent,
   221      6531        15758      2.4      0.1                      children=children))
   222      6531         4291      0.7      0.0                  k += 1
   223    444215       411173      0.9      2.9          cur_left = min(new.right, right)
   224                                               # add whatever's left at the end
   225    559608       407324      0.7      2.9      if cur_left < new.right:
   226    309118       232210      0.8      1.6          existing.insert(k, msprime.Edgeset(
   227    309118       179186      0.6      1.3              left=cur_left,
   228    309118       192993      0.6      1.4              right=new.right,
   229    309118       182372      0.6      1.3              parent=new.parent,
   230    309118      1095978      3.5      7.7              children=new.children))
   231                                               # print("getting")
   232                                               # for x in existing:
   233                                               #     print("   ", x)
   234    559608       292228      0.5      2.1      return None

